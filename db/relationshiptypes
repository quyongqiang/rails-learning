# Relationship Types
Subject - Page


## One-to-one
Subject has_one :page
Page belongs_to :subject


## One-to-many
Subject has_many :pages
Page belongs_to :subject

### has_many methods
subject.pages
subject.pages << page
subject.pages = [page, page, page]
subject.pages.delete(page)
subject.pages.destory(page)
subject.pages.clear
subject.pages.empty?
subject.pages.size

subject.pages.where(visible: true)
subject.pages.size
subject.pages.count
Page.all.size


##Many-to-many Associations: Simple

model:
AdminUser  has_and_belongs_to_many :pages
Page   has_and_belongs_to_many :editors, :class_name => "AdminUser"

schema:
  add_index "admin_users", ["username"], name: "index_admin_users_on_username", using: :btree

  create_table "admin_users_pages", id: false, force: :cascade do |t|
    t.integer "admin_user_id", limit: 4
    t.integer "page_id",       limit: 4
  end


console:
page = Page.find(2)
me = AdminUser.create(first_name: "Kevin", last_name: "Skoglund", username: "Kskoglund")
page.editors << me
me.pages
   SELECT `pages`.* FROM `pages` INNER JOIN `admin_users_pages` ON `pages`.`id` = `admin_users_pages`.`page_id` 
   WHERE `admin_users_pages`.`admin_user_id` = 1


## Many-to-many Associations: Rich
AdminUser - Section
  AdminUser has_many :section_edits
  Section_Edit belongs_to :admin_user
  Section has_many :section_edits
  Section_Edit belongs_to :section
  
  edit =  SectionEdit.create(summary: "Test edit 2")
  me = AdminUser.find(1)
  
  me.section_edits << edit
  # edit.admin_user_id = me.id
  # 使用<< 会直接update保存，使用id需要执行save保存
  
  section.section_edits << edit
  edit.save
  
  
